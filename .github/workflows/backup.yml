
name: GitVault

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit hash
        id: commit
        run: echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Upload to IPFS
        id: upload
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          API_URL: ${{ vars.NEXT_PUBLIC_API_URL || 'https://www.gitvault.xyz' }}
        run: |
          # Setup API URL
          API_URL=${API_URL%/}
          API_URL=${API_URL/#http:/https:}
          API_URL="$API_URL/api"
          
          echo "Using API URL: $API_URL"
          
          # Create temp directory
          TEMP_DIR=$(mktemp -d)
          ARCHIVE_PATH="$TEMP_DIR/repo.tar.gz"
          
          echo "Creating archive..."
          tar --exclude='.git' -czf "$ARCHIVE_PATH" .
          
          # Get total size
          TOTAL_SIZE=$(stat -f%z "$ARCHIVE_PATH" 2>/dev/null || stat -c%s "$ARCHIVE_PATH")
          echo "Archive size: $TOTAL_SIZE bytes"
          
          # Initialize upload
          echo "Initializing upload..."
          RESPONSE=$(curl -s -X POST "$API_URL/storage/upload/init" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-Repository: $GITHUB_REPOSITORY" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            --fail \
            --retry 3 \
            --retry-delay 2 \
            -d "{\"totalSize\":$TOTAL_SIZE}")
          
          # Extract upload ID
          UPLOAD_ID=$(echo "$RESPONSE" | jq -r '.uploadId')
          if [ -z "$UPLOAD_ID" ] || [ "$UPLOAD_ID" = "null" ]; then
            echo "Failed to get upload ID"
            echo "Response: $RESPONSE"
            exit 1
          fi
          
          echo "Upload ID: $UPLOAD_ID"
          
          # Split and upload chunks
          cd "$TEMP_DIR"
          split -b 8M -d "$ARCHIVE_PATH" "chunk-"
          
          # Upload chunks
          CHUNK_NUM=1
          for chunk in chunk-*; do
            echo "Uploading chunk $CHUNK_NUM: $chunk"
            for retry in {1..3}; do
              RESPONSE=$(curl -s -X POST "$API_URL/storage/upload/chunk" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "X-Repository: $GITHUB_REPOSITORY" \
                -H "X-Upload-Id: $UPLOAD_ID" \
                -H "X-Chunk-Number: $CHUNK_NUM" \
                -F "chunk=@$chunk" \
                --fail \
                --retry 3 \
                --retry-delay 2)
              
              if echo "$RESPONSE" | jq -e '.success' >/dev/null; then
                echo "Chunk $CHUNK_NUM uploaded successfully"
                break
              elif [ $retry -eq 3 ]; then
                echo "Failed to upload chunk after 3 retries"
                echo "Response: $RESPONSE"
                exit 1
              else
                echo "Retry $retry: Failed to upload chunk"
                sleep $((retry * 2))
              fi
            done
            CHUNK_NUM=$((CHUNK_NUM + 1))
          done
          
          # Complete upload
          echo "Completing upload..."
          for retry in {1..5}; do
            RESPONSE=$(curl -s -X POST "$API_URL/storage/upload/complete" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-Repository: $GITHUB_REPOSITORY" \
              -H "X-Upload-Id: $UPLOAD_ID" \
              -H "Content-Type: application/json" \
              -H "Accept: application/json" \
              --fail \
              --retry 3 \
              --retry-delay 2 \
              -d "{}")
            
            if echo "$RESPONSE" | jq -e '.cid' >/dev/null; then
              CID=$(echo "$RESPONSE" | jq -r '.cid')
              if [ -n "$CID" ] && [ "$CID" != "null" ]; then
                echo "CID: $CID"
                echo "cid=$CID" >> $GITHUB_OUTPUT
                break
              fi
            fi
            
            if [ $retry -eq 5 ]; then
              echo "Failed to complete upload after 5 retries"
              echo "Response: $RESPONSE"
              exit 1
            else
              echo "Retry $retry: Waiting before retry..."
              sleep $((retry * 5))
            fi
          done
          
          rm -rf "$TEMP_DIR"

      - name: Update repository
        if: success()
        run: |
          if [ ! -f .gitvault ]; then
            echo "repository:" > .gitvault
            echo "  name: $GITHUB_REPOSITORY" >> .gitvault
            echo "backups:" >> .gitvault
          fi
          
          echo "- cid: ${{ steps.upload.outputs.cid }}" >> .gitvault
          echo "  date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> .gitvault
          echo "  commit: ${{ steps.commit.outputs.hash }}" >> .gitvault
          
          if [ -f README.md ]; then
            sed -i '/^\[!\[GitVault/d' README.md
            sed -i "1i [![GitVault Backup](https://img.shields.io/badge/GitVault-Protected-blue)](https://ipfs.io/ipfs/${{ steps.upload.outputs.cid }})" README.md
          else
            echo "[![GitVault Backup](https://img.shields.io/badge/GitVault-Protected-blue)](https://ipfs.io/ipfs/${{ steps.upload.outputs.cid }})" > README.md
          fi
          
          git config user.name "GitVault Bot"
          git config user.email "bot@gitvault.xyz"
          git add .gitvault README.md
          git commit -m "Update GitVault backup [skip ci]" || true
          git push
